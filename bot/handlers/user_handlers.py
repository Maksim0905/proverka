import asyncio
import logging
from aiogram import BaseMiddleware
from aiogram import types, Dispatcher, Bot
from aiogram.filters import CommandStart, Command, StateFilter
from aiogram.types import Message, ContentType, InlineKeyboardButton, InlineKeyboardMarkup, CallbackQuery,InputMedia, InputMediaPhoto, InputMediaVideo, InputMediaAudio, InputMediaDocument, InputMediaAnimation
from aiogram import F, Router
from aiogram.fsm.context import FSMContext
from aiogram.types import FSInputFile
from aiogram.fsm.state import State, StatesGroup
from bot.utils.utils import generate_random_string
from datetime import datetime, timedelta
from aiogram.enums import ParseMode
import bot.functions.db_functions as fn
import bot.keyboards.user_keyboards as kb


user_router = Router()


class AddArt(StatesGroup):
    msg_id = State()
    name = State()
    about = State()
    era = State()
    country = State()
    photo = State()


class AddFilterEra(StatesGroup):
    waiting_era_filter = State()

class AddFilterCountry(StatesGroup):
    waiting_country_filter = State()


class AddFilterAbout(StatesGroup):
    waiting_about_filter = State()


@user_router.message(CommandStart())
async def send_welcome(message: types.Message):
    chat_id = message.chat.id
    text = '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –≤ —Å–∏—Å—Ç–µ–º—É –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ–±–º–µ–Ω–æ–º –∫—É–ª—å—Ç—É—Ä–Ω—ã–º–∏ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞–º–∏ –º–µ–∂–¥—É –º—É–∑–µ—è–º–∏\n'
    text += '–î–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏ —Å–Ω–∏–∑—É!'
    await fn.first_join(chat_id)
    await message.answer(
        text = text,
        reply_markup=kb.start_keys
    )


@user_router.message(F.text == 'üèõ –ü—Ä–æ—Ñ–∏–ª—å')
async def profile(message: Message):
    """ –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    chat_id = message.from_user.id
    exponats = await fn.get_exponats(chat_id)
    username = f'museum-{chat_id}'
    text = f'üèõ –ü—Ä–æ—Ñ–∏–ª—å –º—É–∑–µ—è: <code>{username}</code>\n'
    text += f'üè∫ –ö–ª–∏—á–µ—Å—Ç–≤–æ —ç–∫—Å–ø–æ–Ω–∞—Ç–æ–≤: {len(exponats)}'
    await message.answer(
        text=text,
        parse_mode=ParseMode.HTML,
        reply_markup=kb.transactions
    )


@user_router.message(F.text == '‚ûï –î–æ–±–∞–≤–∏—Ç—å —ç–∫—Å–ø–æ–Ω–∞—Ç')
async def add_expo(message: Message, state: FSMContext):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –∫ —ç–∫—Å–ø–æ–Ω–∞—Ç—É
    """
    msg = await message.answer(
        text='–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —ç–∫—Å–ø–æ–Ω–∞—Ç–∞:',
        parse_mode=ParseMode.HTML,
        reply_markup=kb.back_keys
    )
    await state.update_data(msg_id=msg.message_id)
    await state.set_state(AddArt.name)


@user_router.message(F.text == 'üîÑ –û–±–º–µ–Ω—ã')
async def exchange(message: Message, state: FSMContext):
    """–ú–µ–Ω—é –æ–±–º–µ–Ω–æ–≤
    """
    chat_id = message.from_user.id
    data = await fn.get_filtered_artifacts(chat_id)
    print(data)
    keyboard = []
    try:
        for name in data:
            keyboard.append([InlineKeyboardButton(text=name[1], callback_data=f'ch*{name[0]}')])
    except:
        pass
    keyboard.append([InlineKeyboardButton(text='‚öôÔ∏è –§–∏–ª—å—Ç—Ä—ã', callback_data='filters')])
    keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard)
    msg = await message.answer(
        text='–í—ã–±–µ—Ä–∏—Ç–µ —ç–∫—Å–ø–æ–Ω–∞—Ç',
        parse_mode=ParseMode.HTML,
        reply_markup=keyboard
    )


@user_router.callback_query(F.data.startswith('ch'))
async def get_artefact(callback: CallbackQuery, state: FSMContext, bot: Bot):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± —ç–∫—Å–ø–æ–Ω–∞—Ç–µ
    """
    artefact_id = callback.data.split('*')[1]
    data = await fn.get_artefact(artefact_id)
    print(data)
    text = f'–í–ª–∞–¥–µ–ª–µ—Ü: <code>{data[1]}</code>\n\n'
    text += f'–ù–∞–∑–≤–∞–Ω–∏–µ: {data[2]}\n'
    text += f'–û–ø–∏—Å–∞–Ω–∏–µ: {data[3]}\n'
    text += f'–≠—Ä–∞: {data[4]}\n'
    text += f'–°—Ç—Ä–∞–Ω–∞: {data[5]}\n'
    await callback.message.delete()
    await bot.send_photo(chat_id=callback.from_user.id, photo=data[6], caption=text, parse_mode=ParseMode.HTML, reply_markup=kb.change_keyboard(data[0]))


@user_router.callback_query(F.data.startswith('change'))
async def change_artefact(callback: CallbackQuery, state: FSMContext, bot: Bot):
    """–û–±–º–µ–Ω —ç–∫—Å–ø–æ–Ω–∞—Ç–∞
    """
    artefact_id = callback.data.split('_')[1]
    await callback.message.edit_text(
        text='–í—ã –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª–∏ —ç–∫—Å–ø–æ–Ω–∞—Ç –∏–ª–∏ –æ–Ω –≤–∞—à!',
        parse_mode=ParseMode.HTML
    )


@user_router.callback_query(F.data == 'back_change')
async def back_change(callback: CallbackQuery, state: FSMContext, bot: Bot):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ —Å–ø–∏—Å–∫—É —ç–∫—Å–ø–æ–Ω–∞—Ç–æ–≤
    """
    chat_id = callback.from_user.id
    data = await fn.get_filtered_artifacts(chat_id)
    print(data)
    keyboard = []
    try:
        for name in data:
            keyboard.append([InlineKeyboardButton(text=name[1], callback_data=f'ch*{name[0]}')])
    except:
        pass
    keyboard.append([InlineKeyboardButton(text='‚öôÔ∏è –§–∏–ª—å—Ç—Ä—ã', callback_data='filters')])
    keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard)
    await callback.message.delete()
    await callback.message.answer(
        text='–í—ã–±–µ—Ä–∏—Ç–µ —ç–∫—Å–ø–æ–Ω–∞—Ç',
        parse_mode=ParseMode.HTML,
        reply_markup=keyboard
    )


@user_router.callback_query(F.data == 'filters')
async def filters(callback: CallbackQuery, state: FSMContext, bot: Bot):
    """–§–∏–ª—å—Ç—Ä—ã
    """
    await callback.message.edit_text(
        text='–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª—å—Ç—Ä',
        parse_mode=ParseMode.HTML,
        reply_markup=kb.filter_kb
    )


@user_router.callback_query(F.data.startswith('fl'))
async def get_filter(callback: CallbackQuery, state: FSMContext, bot: Bot):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± —ç–∫—Å–ø–æ–Ω–∞—Ç–µ
    """
    chat_id = callback.from_user.id
    filter = callback.data.split('_')[1]
    if filter == 'reset':
        await fn.delete_filters(chat_id)
        await callback.answer('–§–∏–ª—å—Ç—Ä—ã —Å–±—Ä–æ—à–µ–Ω—ã', show_alert=False)

    elif filter == 'era':
        await callback.message.edit_text(
            text='–í–≤–µ–¥–∏—Ç–µ —ç—Ä—É\n\n–î–ª—è –æ—Ç–º–µ–Ω—ã –≤–≤–µ–¥–∏—Ç–µ <code>‚ùå –û—Ç–º–µ–Ω–∞</code>',
            parse_mode=ParseMode.HTML
        )
        await state.set_state(AddFilterEra.waiting_era_filter)
    
    elif filter == 'country':
        await callback.message.edit_text(
            text='–í–≤–µ–¥–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É\n\n–î–ª—è –æ—Ç–º–µ–Ω—ã –≤–≤–µ–¥–∏—Ç–µ <code>‚ùå –û—Ç–º–µ–Ω–∞</code>',
            parse_mode=ParseMode.HTML
        )
        await state.set_state(AddFilterCountry.waiting_country_filter)
    
    elif filter == 'about':
        await callback.message.edit_text(
            text='–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ\n\n–î–ª—è –æ—Ç–º–µ–Ω—ã –≤–≤–µ–¥–∏—Ç–µ <code>‚ùå –û—Ç–º–µ–Ω–∞</code>',
            parse_mode=ParseMode.HTML
        )
        await state.set_state(AddFilterAbout.waiting_about_filter)


@user_router.message(AddFilterAbout.waiting_about_filter)
async def filter_about(message: Message, state: FSMContext, bot: Bot):
    """–§–∏–ª—å—Ç—Ä –ø–æ –æ–ø–∏—Å–∞–Ω–∏—é
    """
    chat_id = message.from_user.id
    if message.text == '‚ùå –û—Ç–º–µ–Ω–∞':
        await state.clear()
        await message.answer('–û—Ç–º–µ–Ω–µ–Ω–æ', reply_markup=kb.start_keys)
        await message.delete()
    else:
        about = message.text
        await fn.filter_about(chat_id, about)
        await message.answer('–§–∏–ª—å—Ç—Ä –ø–æ –æ–ø–∏—Å–∞–Ω–∏—é —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω', reply_markup=kb.filter_kb)
        await state.clear()


@user_router.message(AddFilterCountry.waiting_country_filter)
async def filter_country(message: Message, state: FSMContext, bot: Bot):
    """–§–∏–ª—å—Ç—Ä –ø–æ —Å—Ç—Ä–∞–Ω–µ
    """
    chat_id = message.from_user.id
    if message.text == '‚ùå –û—Ç–º–µ–Ω–∞':
        await state.clear()
        await message.answer('–û—Ç–º–µ–Ω–µ–Ω–æ', reply_markup=kb.start_keys)
        await message.delete()
    else:
        country = message.text
        await fn.filter_country(chat_id, country)
        await message.answer('–§–∏–ª—å—Ç—Ä –ø–æ —Å—Ç—Ä–∞–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω', reply_markup=kb.filter_kb)
        await state.clear()


@user_router.message(AddFilterEra.waiting_era_filter)
async def filter_era(message: Message, state: FSMContext, bot: Bot):
    """–§–∏–ª—å—Ç—Ä –ø–æ —ç—Ä–µ
    """
    chat_id = message.from_user.id
    if message.text == '‚ùå –û—Ç–º–µ–Ω–∞':
        await state.clear()
        await message.answer('–û—Ç–º–µ–Ω–µ–Ω–æ', reply_markup=kb.start_keys)
        await message.delete()
    else:
        era = message.text
        await fn.filter_era(chat_id, era)
        await message.answer('–§–∏–ª—å—Ç—Ä –ø–æ —ç—Ä–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω', reply_markup=kb.filter_kb)
        await state.clear()





@user_router.message(AddArt.name)
async def add_expo_about(message: Message, state: FSMContext, bot: Bot):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è –∫ —ç–∫—Å–ø–æ–Ω–∞—Ç—É
    """
    chat_id = message.from_user.id
    if message.text == '‚ùå –û—Ç–º–µ–Ω–∞':
        await state.clear()
        await message.answer('–û—Ç–º–µ–Ω–µ–Ω–æ', reply_markup=kb.start_keys)
        await message.delete()
    else:
        msg_id = (await state.get_data())['msg_id']
        await bot.delete_message(chat_id=chat_id, message_id=msg_id)
        await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
        msg = await message.answer('–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ:', reply_markup=kb.back_keys)
        await state.update_data(msg_id=msg.message_id)
        await state.update_data(name=message.text)
        await state.set_state(AddArt.about)


@user_router.message(AddArt.about)
async def add_expo_era(message: Message, state: FSMContext, bot: Bot):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —ç—Ä—ã –∫ —ç–∫—Å–ø–æ–Ω–∞—Ç—É
    """
    chat_id = message.from_user.id
    if message.text == '‚ùå –û—Ç–º–µ–Ω–∞':
        await state.clear()
        await message.answer('–û—Ç–º–µ–Ω–µ–Ω–æ', reply_markup=kb.start_keys)
        await message.delete()
    else:
        msg_id = (await state.get_data())['msg_id']
        await bot.delete_message(chat_id=chat_id, message_id=msg_id)
        await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
        msg = await message.answer('–í–≤–µ–¥–∏—Ç–µ —ç—Ä—É:', reply_markup=kb.back_keys)
        await state.update_data(msg_id=msg.message_id)
        await state.update_data(about=message.text)
        await state.set_state(AddArt.era)


@user_router.message(AddArt.era)
async def add_expo_country(message: Message, state: FSMContext, bot: Bot):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω—ã –∫ —ç–∫—Å–ø–æ–Ω–∞—Ç—É
    """
    chat_id = message.from_user.id
    if message.text == '‚ùå –û—Ç–º–µ–Ω–∞':
        await state.clear()
        await message.answer('–û—Ç–º–µ–Ω–µ–Ω–æ', reply_markup=kb.start_keys)
        await message.delete()
    else:
        msg_id = (await state.get_data())['msg_id']
        await bot.delete_message(chat_id=chat_id, message_id=msg_id)
        await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
        msg = await message.answer('–í–≤–µ–¥–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É:', reply_markup=kb.back_keys)
        await state.update_data(msg_id=msg.message_id)
        await state.update_data(era=message.text)
        await state.set_state(AddArt.country)


@user_router.message(AddArt.country)
async def add_expo_photo(message: Message, state: FSMContext, bot: Bot):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ–æ—Ç–æ –∫ —ç–∫—Å–ø–æ–Ω–∞—Ç—É
    """
    chat_id = message.from_user.id
    if message.text == '‚ùå –û—Ç–º–µ–Ω–∞':
        await state.clear()
        await message.answer('–û—Ç–º–µ–Ω–µ–Ω–æ', reply_markup=kb.start_keys)
        await message.delete()
    else:
        msg_id = (await state.get_data())['msg_id']
        await bot.delete_message(chat_id=chat_id, message_id=msg_id)
        await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
        msg = await message.answer('–ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ:', reply_markup=kb.back_keys)
        await state.update_data(msg_id=msg.message_id)
        await state.update_data(country=message.text)
        await state.set_state(AddArt.photo)


@user_router.message(AddArt.photo)
async def add_expo_result(message: Message, state: FSMContext, bot: Bot):
    """–í—ã–≤–æ–¥ –∏—Ç–æ–≥–æ–≤–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    """
    chat_id = message.from_user.id
    if message.text == '‚ùå –û—Ç–º–µ–Ω–∞':
        await state.clear()
        await message.answer('–û—Ç–º–µ–Ω–µ–Ω–æ', reply_markup=kb.start_keys)
        await message.delete()
    else:
        msg_id = (await state.get_data())['msg_id']
        await bot.delete_message(chat_id=chat_id, message_id=msg_id)
        await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
        photo_id = message.photo[-1].file_id
        id = generate_random_string()
        await fn.add_artefact_trash(id,
                                     f'{(await state.get_data())["name"]}*{(await state.get_data())["about"]}*{(await state.get_data())["era"]}*{(await state.get_data())["country"]}*{photo_id}')
        await message.answer_photo(
            photo=photo_id,
            caption=f'–ù–∞–∑–≤–∞–Ω–∏–µ: {(await state.get_data())["name"]}\n'
                    f'–û–ø–∏—Å–∞–Ω–∏–µ: {(await state.get_data())["about"]}\n'
                    f'–≠—Ä–∞: {(await state.get_data())["era"]}\n'
                    f'C—Ç—Ä–∞–Ω–∞: {(await state.get_data())["country"]}\n',
            reply_markup=kb.generate_keyboard(id)
        )
        await state.clear()


@user_router.callback_query(F.data.startswith('add_art'))
async def add_art(callback: CallbackQuery, bot: Bot):
    """ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —ç–∫—Å–ø–æ–Ω–∞—Ç–∞ –≤ –±–∞–∑—É
    """
    chat_id = callback.from_user.id
    id = callback.data.split('-')[1]
    data = await fn.get_artefact_trash(id)
    name, about, era, country, photo = tuple((await fn.get_artefact_trash(id))[0].split('*'))
    # print(name, about, era, country, photo)
    await fn.add_expo(chat_id, name, about, era, country, photo)
    await callback.message.answer('‚úÖ –≠–∫—Å–ø–æ–Ω–∞—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω', reply_markup=kb.start_keys)
    await bot.delete_message(chat_id=chat_id, message_id=callback.message.message_id)


@user_router.callback_query(F.data == 'delete_previev')
async def del_art(callback: CallbackQuery, bot: Bot):
    await callback.message.delete()
    await callback.message.answer('‚ùå –ß–µ—Ä–Ω–æ–≤–∏–∫ —É–¥–∞–ª—ë–Ω', reply_markup=kb.start_keys)


@user_router.callback_query(F.data == 'transaction')
async def transaction(callback: CallbackQuery):
    chat_id = callback.from_user.id
    await callback.message.answer(
        text='–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç',
        parse_mode=ParseMode.HTML
    )


@user_router.callback_query(F.data == 'my_expo')
async def back(callback: CallbackQuery):
    chat_id = callback.from_user.id
    # TODO: –î–æ–±–∞–≤–∏—Ç—å –≤—ã–≤–æ–¥ —ç–∫—Å–ø–æ–Ω–∞—Ç–æ–≤

